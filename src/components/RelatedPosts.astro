---
import { getCollection, type CollectionEntry } from "astro:content";
import { getAnalytics } from "@scripts/supabase";

interface Props {
  slug: string | undefined;
  tags: string[];
}

const { slug: postSlug, tags } = Astro.props;

const analytics = await getAnalytics();

const relatedPosts = await getCollection(
  "blog",
  ({ slug, data }: CollectionEntry<"blog">) =>
    data.tags?.some((tag: string) => tags.includes(tag)) && slug !== postSlug
);

if (relatedPosts.length < 3) {
  const topPosts = analytics.sort((a, b) => b.visits - a.visits).slice(0, 5);

  let morePosts = await getCollection(
    "blog",
    ({ slug }: CollectionEntry<"blog">) =>
      relatedPosts
        .map((post: CollectionEntry<"blog">) => post.slug)
        .includes(slug) === false &&
      slug !== postSlug &&
      topPosts
        .map(({ path }) => path.replace("/blog/", "").replace("/", ""))
        .includes(slug)
  );

  relatedPosts.push(
    ...morePosts
      .sort((a: CollectionEntry<"blog">, b: CollectionEntry<"blog">) => {
        const aAnalytic = analytics.find(({ path }) => path === a.slug);
        const bAnalytic = analytics.find(({ path }) => path === b.slug);

        const aVisits = aAnalytic ? aAnalytic.visits : 0;
        const bVisits = bAnalytic ? bAnalytic.visits : 0;

        return bVisits - aVisits;
      })
      .slice(0, 3 - relatedPosts.length)
  );
}
---

{
  relatedPosts.length > 0 && (
    <section class="related">
      <h5>Related Reading</h5>
      <ul>
        {relatedPosts.map((post: CollectionEntry<"blog">) => (
          <li>
            <a href={`/blog/${post.slug}/`}>{post.data.title}</a>
          </li>
        ))}
      </ul>
    </section>
  )
}

<style>
  .related {
		padding: 0 1rem;
		margin-top: 2rem;
  }
	.related h5 {
		font-weight: bold;
	}
  .related ul {
		display: flex;
		flex-direction: column;
		padding: 0;
		list-style: none;
		margin-top: 1rem;
  }
  .related li {
		border-left: 4px solid transparent;
		font-size: 0.7rem;
		margin: 0;
		padding: 0.5rem 0;
  }
  .related a {
		text-decoration: none;
		padding: 0;
		color: var(--light-text);
  }
  .related a:hover {
    @apply text-neon !important;
		color: var(--blue);
  }
</style>
