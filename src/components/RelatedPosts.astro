---
import { getCollection, type CollectionEntry } from "astro:content";

interface Props {
  slug: string | undefined;
  tags: string[] | undefined;
}

const { slug: postSlug, tags } = Astro.props;

let relatedPosts = await getCollection(
  "blog",
  ({ slug, data }: CollectionEntry<"blog">) =>
    tags && data.tags?.some((tag: string) => tags.includes(tag)) && slug !== postSlug
);

relatedPosts = relatedPosts.slice(0, 3);
---

{
  relatedPosts.length > 0 && (
    <section class="related">
      <h5>Related Reading</h5>
      <ul>
        {relatedPosts.map((post: CollectionEntry<"blog">) => (
          <li>
            <a href={`/blog/${post.slug}/`}>
							{post.data.title}<br/>
							<summary>{post.data.summary}</summary></a>
          </li>
        ))}
      </ul>
    </section>
  )
}

<style>
  .related {
		padding: 0 1rem;
		margin-top: 2rem;
  }
	.related h5 {
		font-family: var(--font-anton);
		text-transform: uppercase;
		font-size: 2rem;
	}
  .related ul {
		display: flex;
		flex-direction: column;
		padding: 0;
		list-style: none;
		margin-top: 2rem;
		margin-left: 1rem;
		gap: 1.5rem;
  }
  .related li {
		font-size: 1.25rem;
		line-height: 1.2rem;
		margin: 0;
		border-left: 3px dashed var(--link-color);
		padding: 0.5rem;
		padding-right: 0;
  }
  .related li:hover {
		border-color: var(--pink);
  }
  .related a {
		border: 0;
		font-family: var(--font-anton);
		text-transform: uppercase;
  }
	.related a:hover {
		color: var(--pink);
	}
	.related a summary {
		font-family: var(--font-poppins);
		text-transform: none;
		font-size: 0.8rem;
		line-height: 1rem;
		color: var(--text);
	}
</style>
