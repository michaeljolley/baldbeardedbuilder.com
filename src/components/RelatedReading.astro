---
import { getCollection } from 'astro:content'
import Small from './Cards/Small.astro'
import Condensed from './Cards/Condensed.astro'
import Tall from './Cards/Tall.astro'
import { getAnalytics } from '../scripts/supabase'

interface Props {
  slug: string | undefined
  tags: string[]
}

const { slug: postSlug, tags } = Astro.props

const analytics = await getAnalytics()

const relatedPosts = await getCollection(
  'blog',
  ({ slug, data }) =>
    data.tags?.some((tag) => tags.includes(tag)) && slug !== postSlug
)

if (relatedPosts.length < 3) {
  const topPosts = analytics.sort((a, b) => b.visits - a.visits).slice(0, 5)

  let morePosts = await getCollection(
    'blog',
    ({ slug }) =>
      relatedPosts.map((post) => post.slug).includes(slug) === false &&
      slug !== postSlug &&
      topPosts
        .map(({ path }) => path.replace('/blog/', '').replace('/', ''))
        .includes(slug)
  )

  relatedPosts.push(
    ...morePosts
      .sort((a, b) => {
        const aAnalytic = analytics.find(({ path }) => path === a.slug)
        const bAnalytic = analytics.find(({ path }) => path === b.slug)

        const aVisits = aAnalytic ? aAnalytic.visits : 0
        const bVisits = bAnalytic ? bAnalytic.visits : 0

        return bVisits - aVisits
      })
      .slice(0, 3 - relatedPosts.length)
  )
}
---

{
  relatedPosts.length > 0 && (
    <section>
      <h3>Keep Reading</h3>
      <div>
        <Tall
          post={relatedPosts[0]}
          class="hidden md:flex xl:hidden md:row-start-1 md:row-span-2"
        />
        <Small
          post={relatedPosts[0]}
          class="flex md:hidden xl:flex md:row-start-1 md:row-span-2"
        />
        <Condensed post={relatedPosts[1]} />
        <Condensed post={relatedPosts[2]} />
      </div>
    </section>
  )
}

<style lang="scss">
  section {
    @apply pb-12;
    @apply flex flex-col;

    > div {
      @apply flex flex-col md:grid md:grid-cols-2 gap-12;
      @apply pt-12;
    }
  }
</style>
