---
import type { CollectionEntry } from 'astro:content'
interface Props {
  class?: string
  style?: string
  post: CollectionEntry<'blog'>
}
const { style: styles, class: classes, post } = Astro.props
---

<a
  href={`/blog/${post.slug}/`}
  style={`background-image:url(${post.data.image}); ${styles}`}
  class={classes}
>
  <div class="overlay">
    <div class="content">
      <h3>{post.data.title}</h3>
      <p class="synopsis">
        {post.data.summary}
      </p>
    </div>
  </div>
</a>

<style lang="scss">
  a {
    --transition-duration: 700ms;

    @apply aspect-video md:aspect-auto;
    @apply overflow-hidden;
    @apply relative;
    @apply bg-cover;
    @apply border;
    border-image-source: linear-gradient(
      to bottom,
      rgba(255, 255, 255, 0.2),
      rgba(255, 255, 255, 0.6) 100%
    );
    border-image-slice: 1;
    transition: transform var(--transition-duration);

    .overlay {
      @apply h-full;
      background-image: linear-gradient(
        to bottom,
        rgba(0, 0, 0, 0.1),
        rgba(0, 0, 0, 0.5) 60%,
        rgba(0, 0, 0, 0.95) 90%
      );

      .content {
        z-index: 1;
        position: absolute;
        bottom: 2em;
        left: min(3em, 3vmin);
        right: min(3em, 3vmin);
        text-align: left;
        transition: transform var(--transition-duration) ease-in-out;

        @screen lg {
          bottom: min(2.5em, 5vmin);
        }

        > * {
          position: relative;
          will-change: transform;
        }

        h3 {
          @apply text-2xl;
        }

        .synopsis {
          @apply text-xs;
          transition-delay: calc(var(--transition-duration) / 8);
          transition-property: opacity, transform;
          transition-duration: calc(var(--transition-duration) / 2);
        }
      }
    }

    &:hover {
      transform: scale(1.03);
      .overlay {
        background-image: linear-gradient(
          to bottom,
          rgba(0, 0, 0, 0) 30%,
          rgba(0, 0, 0, 0.7) 50%,
          rgba(0, 0, 0, 0.9) 90%
        );
        .content {
          .synopsis {
            transition-duration: var(--transition-duration);
            transition-delay: calc(var(--transition-duration) / 3);
          }
        }
      }
    }

    &:not(:hover) {
      .overlay {
        .content {
          transform: translateY(calc(100% - 4.5em));
          .synopsis {
            opacity: 0;
            transform: translateY(1em);
          }
        }
      }
    }
  }
</style>
