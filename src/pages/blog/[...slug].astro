---
import { getCollection, type CollectionEntry } from "astro:content";
import BaseLayout from "@layouts/base.astro";

export async function getStaticPaths() {
  const blogEntries = await getCollection("blog");

  return blogEntries.map((entry: CollectionEntry<"blog">) => ({
    params: { slug: entry.slug },
    props: { post: entry },
  }));
}

const { slug } = Astro.params;
const { post } = Astro.props;
const { title, description, tags, canonicalUrl, image, snapshot, pubDate } = post.data;
const { Content, headings } = await post.render();
const permalink = `https://${import.meta.env.HOST}/blog/${slug}/`;
let options = {
  month: "long",
  day: "numeric",
  weekday: "long",
  year: "numeric",
} as Intl.DateTimeFormatOptions;
---

<BaseLayout {title} {description} {permalink} {canonicalUrl}>
	<header>
			<h1>{title}</h1>
	</header>
	<article class="container">
		<main class="content">
			{pubDate <= new Date() && <Content />}
			{
				pubDate > new Date() && (
				<div class="snapshot">
              <blockquote>
                <h2>Coming Soon</h2>
                <p>
                  This article is scheduled to drop on{" "}
                  <b>
                    {new Intl.DateTimeFormat("en-US", options).format(pubDate)}
                  </b>. In the meantime, here's a snapshot of the article as it will
                  appear when published.
                </p>
              </blockquote>
              <div class="summary" set:html={snapshot} />
            </div>
          )
        }
		</main>
		<aside>
		</aside>
	</article>
</ArticleLayout>

<style>
  article aside {
    display: none;
		position: -webkit-sticky;
		position: sticky;
		top: 5rem;
		z-index: 1;
  }

	main {
		padding: 0 2rem;
	}
	
	@media (min-width:1024px) /* lg */ {
		article aside {
      display: flex;
			flex-direction: column;
		}
	}
		
	@media (min-width:1024px) /* lg */ {
		article {
			@apply flex;
		}
		article {
			display: grid;
			grid-template-columns: 70% 1fr;
			align-items: flex-start;
			gap: 2rem;
		}
	}
		
	@media (min-width:1280px) /* xl */ {
		article:has(aside) {
			grid-template-columns: 75% 1fr;
		}
	}
</style>
